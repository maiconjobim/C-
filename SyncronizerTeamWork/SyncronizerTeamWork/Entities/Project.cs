using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Text;

namespace SyncronizerTeamWork.Entities
{

    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using QuickType;
    //
    //    var coordinate = Coordinate.FromJson(jsonString);

    namespace QuickType
    {
        using System;
        using System.Collections.Generic;

        using System.Globalization;
        using Newtonsoft.Json;
        using Newtonsoft.Json.Converters;

        public partial class Coordinate
        {
            [JsonProperty("projects", NullValueHandling = NullValueHandling.Ignore)]
            public Project[] Projects { get; set; }

            [JsonProperty("STATUS", NullValueHandling = NullValueHandling.Ignore)]
            public string Status { get; set; }
        }

        public partial class Project
        {
            [JsonProperty("announcement", NullValueHandling = NullValueHandling.Ignore)]
            public string Announcement { get; set; }

            [JsonProperty("announcementHTML", NullValueHandling = NullValueHandling.Ignore)]
            public string AnnouncementHtml { get; set; }

            [JsonProperty("boardData", NullValueHandling = NullValueHandling.Ignore)]
            public Dictionary<string, object> BoardData { get; set; }

            [JsonProperty("category", NullValueHandling = NullValueHandling.Ignore)]
            public Category Category { get; set; }

            [JsonProperty("company", NullValueHandling = NullValueHandling.Ignore)]
            public Company Company { get; set; }

            [JsonProperty("created-on", NullValueHandling = NullValueHandling.Ignore)]
            public string CreatedOn { get; set; }

            [JsonProperty("defaultPrivacy", NullValueHandling = NullValueHandling.Ignore)]
            public string DefaultPrivacy { get; set; }

            [JsonProperty("defaults", NullValueHandling = NullValueHandling.Ignore)]
            public Defaults Defaults { get; set; }

            [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
            public string Description { get; set; }

            [JsonProperty("endDate", NullValueHandling = NullValueHandling.Ignore)]
            public string EndDate { get; set; }

            [JsonProperty("filesAutoNewVersion", NullValueHandling = NullValueHandling.Ignore)]
            public bool? FilesAutoNewVersion { get; set; }

            [JsonProperty("harvest-timers-enabled", NullValueHandling = NullValueHandling.Ignore)]
            public bool? HarvestTimersEnabled { get; set; }

            [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
            public string Id { get; set; }

            [JsonProperty("integrations", NullValueHandling = NullValueHandling.Ignore)]
            public Integrations Integrations { get; set; }

            [JsonProperty("isProjectAdmin", NullValueHandling = NullValueHandling.Ignore)]
            public bool? IsProjectAdmin { get; set; }

            [JsonProperty("last-changed-on", NullValueHandling = NullValueHandling.Ignore)]
            public string LastChangedOn { get; set; }

            [JsonProperty("logo", NullValueHandling = NullValueHandling.Ignore)]
            public string Logo { get; set; }

            [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
            public string Name { get; set; }

            [JsonProperty("notifyeveryone", NullValueHandling = NullValueHandling.Ignore)]
            public bool? Notifyeveryone { get; set; }

            [JsonProperty("overview-start-page", NullValueHandling = NullValueHandling.Ignore)]
            public string OverviewStartPage { get; set; }

            [JsonProperty("privacyEnabled", NullValueHandling = NullValueHandling.Ignore)]
            public bool? PrivacyEnabled { get; set; }

            [JsonProperty("replyByEmailEnabled", NullValueHandling = NullValueHandling.Ignore)]
            public bool? ReplyByEmailEnabled { get; set; }

            [JsonProperty("show-announcement", NullValueHandling = NullValueHandling.Ignore)]
            public bool? ShowAnnouncement { get; set; }

            [JsonProperty("starred", NullValueHandling = NullValueHandling.Ignore)]
            public bool? Starred { get; set; }

            [JsonProperty("start-page", NullValueHandling = NullValueHandling.Ignore)]
            public string StartPage { get; set; }

            [JsonProperty("startDate", NullValueHandling = NullValueHandling.Ignore)]
            public string StartDate { get; set; }

            [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
            public string Status { get; set; }

            [JsonProperty("subStatus", NullValueHandling = NullValueHandling.Ignore)]
            public string SubStatus { get; set; }

            [JsonProperty("tags", NullValueHandling = NullValueHandling.Ignore)]
            public Dictionary<string, object>[] Tags { get; set; }

            [JsonProperty("tasks-start-page", NullValueHandling = NullValueHandling.Ignore)]
            public string TasksStartPage { get; set; }
        }

        public partial class Category
        {
            [JsonProperty("color", NullValueHandling = NullValueHandling.Ignore)]
            public string Color { get; set; }

            [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
            public string Id { get; set; }

            [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
            public string Name { get; set; }
        }

        public partial class Company
        {
            [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
            public string Id { get; set; }

            [JsonProperty("is-owner", NullValueHandling = NullValueHandling.Ignore)]
            public string IsOwner { get; set; }

            [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
            public string Name { get; set; }
        }

        public partial class Defaults
        {
            [JsonProperty("privacy", NullValueHandling = NullValueHandling.Ignore)]
            public string Privacy { get; set; }
        }

        public partial class Integrations
        {
            [JsonProperty("microsoftConnectors", NullValueHandling = NullValueHandling.Ignore)]
            public MicrosoftConnectors MicrosoftConnectors { get; set; }

            [JsonProperty("onedrivebusiness", NullValueHandling = NullValueHandling.Ignore)]
            public Onedrivebusiness Onedrivebusiness { get; set; }

            [JsonProperty("sharepoint", NullValueHandling = NullValueHandling.Ignore)]
            public Sharepoint Sharepoint { get; set; }

            [JsonProperty("xero", NullValueHandling = NullValueHandling.Ignore)]
            public Xero Xero { get; set; }
        }

        public partial class MicrosoftConnectors
        {
            [JsonProperty("enabled", NullValueHandling = NullValueHandling.Ignore)]
            public bool? Enabled { get; set; }
        }

        public partial class Onedrivebusiness
        {
            [JsonProperty("account", NullValueHandling = NullValueHandling.Ignore)]
            public string Account { get; set; }

            [JsonProperty("enabled", NullValueHandling = NullValueHandling.Ignore)]
            public bool? Enabled { get; set; }

            [JsonProperty("folder", NullValueHandling = NullValueHandling.Ignore)]
            public string Folder { get; set; }

            [JsonProperty("foldername", NullValueHandling = NullValueHandling.Ignore)]
            public string Foldername { get; set; }
        }

        public partial class Sharepoint
        {
            [JsonProperty("account", NullValueHandling = NullValueHandling.Ignore)]
            public string Account { get; set; }

            [JsonProperty("enabled", NullValueHandling = NullValueHandling.Ignore)]
            public bool? Enabled { get; set; }

            [JsonProperty("folder", NullValueHandling = NullValueHandling.Ignore)]
            public string Folder { get; set; }

            [JsonProperty("foldername", NullValueHandling = NullValueHandling.Ignore)]
            public string Foldername { get; set; }
        }

        public partial class Xero
        {
            [JsonProperty("basecurrency", NullValueHandling = NullValueHandling.Ignore)]
            public string Basecurrency { get; set; }

            [JsonProperty("connected", NullValueHandling = NullValueHandling.Ignore)]
            public string Connected { get; set; }

            [JsonProperty("countrycode", NullValueHandling = NullValueHandling.Ignore)]
            public string Countrycode { get; set; }

            [JsonProperty("enabled", NullValueHandling = NullValueHandling.Ignore)]
            public bool? Enabled { get; set; }

            [JsonProperty("organisation", NullValueHandling = NullValueHandling.Ignore)]
            public string Organisation { get; set; }
        }

        public partial class Coordinate
        {
            public static Coordinate FromJson(string json) => JsonConvert.DeserializeObject<Coordinate>(json, QuickType.Converter.Settings);
        }

        public static class Serialize
        {
            public static string ToJson(this Coordinate self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }
    }








}
